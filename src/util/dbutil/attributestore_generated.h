// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTRIBUTESTORE_JASMINEGRAPH_ATTRIBUTESTORE_H_
#define FLATBUFFERS_GENERATED_ATTRIBUTESTORE_JASMINEGRAPH_ATTRIBUTESTORE_H_

#include "flatbuffers/flatbuffers.h"

namespace JasmineGraph {
namespace AttributeStore {

struct AttributeStore;

struct AttributeStoreEntry;

struct AttributeStore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTRIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<AttributeStoreEntry>> *entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AttributeStoreEntry>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           verifier.EndTable();
  }
};

struct AttributeStoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AttributeStoreEntry>>> entries) {
    fbb_.AddOffset(AttributeStore::VT_ENTRIES, entries);
  }
  explicit AttributeStoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AttributeStoreBuilder &operator=(const AttributeStoreBuilder &);
  flatbuffers::Offset<AttributeStore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AttributeStore>(end);
    return o;
  }
};

inline flatbuffers::Offset<AttributeStore> CreateAttributeStore(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AttributeStoreEntry>>> entries = 0) {
  AttributeStoreBuilder builder_(_fbb);
  builder_.add_entries(entries);
  return builder_.Finish();
}

inline flatbuffers::Offset<AttributeStore> CreateAttributeStoreDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<AttributeStoreEntry>> *entries = nullptr) {
  return JasmineGraph::AttributeStore::CreateAttributeStore(
      _fbb,
      entries ? _fbb.CreateVector<flatbuffers::Offset<AttributeStoreEntry>>(*entries) : 0);
}

struct AttributeStoreEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_VALUE = 6
  };
  int64_t key() const {
    return GetField<int64_t>(VT_KEY, 0);
  }
  bool KeyCompareLessThan(const AttributeStoreEntry *o) const {
    return key() < o->key();
  }
  int KeyCompareWithValue(int64_t val) const {
    return static_cast<int>(key() > val) - static_cast<int>(key() < val);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_KEY) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.VerifyVectorOfStrings(value()) &&
           verifier.EndTable();
  }
};

struct AttributeStoreEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(int64_t key) {
    fbb_.AddElement<int64_t>(AttributeStoreEntry::VT_KEY, key, 0);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value) {
    fbb_.AddOffset(AttributeStoreEntry::VT_VALUE, value);
  }
  explicit AttributeStoreEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AttributeStoreEntryBuilder &operator=(const AttributeStoreEntryBuilder &);
  flatbuffers::Offset<AttributeStoreEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AttributeStoreEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<AttributeStoreEntry> CreateAttributeStoreEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t key = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value = 0) {
  AttributeStoreEntryBuilder builder_(_fbb);
  builder_.add_key(key);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<AttributeStoreEntry> CreateAttributeStoreEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t key = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *value = nullptr) {
  return JasmineGraph::AttributeStore::CreateAttributeStoreEntry(
      _fbb,
      key,
      value ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*value) : 0);
}

inline const JasmineGraph::AttributeStore::AttributeStore *GetAttributeStore(const void *buf) {
  return flatbuffers::GetRoot<JasmineGraph::AttributeStore::AttributeStore>(buf);
}

inline const JasmineGraph::AttributeStore::AttributeStore *GetSizePrefixedAttributeStore(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<JasmineGraph::AttributeStore::AttributeStore>(buf);
}

inline bool VerifyAttributeStoreBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<JasmineGraph::AttributeStore::AttributeStore>(nullptr);
}

inline bool VerifySizePrefixedAttributeStoreBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<JasmineGraph::AttributeStore::AttributeStore>(nullptr);
}

inline void FinishAttributeStoreBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<JasmineGraph::AttributeStore::AttributeStore> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAttributeStoreBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<JasmineGraph::AttributeStore::AttributeStore> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace AttributeStore
}  // namespace JasmineGraph

#endif  // FLATBUFFERS_GENERATED_ATTRIBUTESTORE_JASMINEGRAPH_ATTRIBUTESTORE_H_
